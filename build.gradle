// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: rootProject.file('qc_new_module.gradle')

ext {
  configuration = [package             : "cn.qingchengfit.staffkit",
                   buildToolsVersion   : "27.0.3",
                   compileVersion      : 27,
                   minSdk              : 16,
                   targetSdk           : 26,
                   version_code        : 109, //缝10必更
                   version_name        : "0.109.0",
                   trainer_version_code: 167,
                   trainer_version_name: "1.6.7"

  ]

  libraries = [supportVersion  : "27.1.1",
               dagger          : "2.11",
               rxjava          : "1.1.6",
               rxandroid       : "1.2.1",
               retrofit        : "2.3.0",
               rxbind          : "0.4.0",
               okhttp          : "3.8.1",
               javax_annotation: "10.0-b28",
               glide           : "3.7.0",
               fragmentArg     : "3.0.2",
               tinkerpatch     : "1.1.3",
               tinker          : "1.7.7",
               flabellum       : "0.2.23",
      constraint_layout: "1.0.2",
  ]
  bakPath = "tinkeroutput/"
  chat_version = "1.0.0"
  recruit_version = "1.1.1"
  buildTimeListener = new BuildTimeListener()
  today = new Date().format('yyMMdd').toInteger()
  ticktime = System.currentTimeMillis() / 1000
  //    isApInvalidated = { -> return hasAnyFileRelatedToApChanged() }
}
/**
 *  打印超过50ms的任务*/
class BuildTimeListener implements TaskExecutionListener, BuildListener {
  private Date clock
  private times = []

  @Override
  void beforeExecute(Task task) {
    clock = new Date()
  }

  @Override
  void afterExecute(Task task, TaskState taskState) {
    def ms = new Date().time - clock.time
    times.add([ms, task.path])

    //task.project.logger.warn "${task.path} spend ${ms}ms"
  }

  @Override
  void buildFinished(BuildResult result) {
    println "Task spend time:"
    for (time in times) {
      if (time[0] >= 50) {
        printf "%7sms  %s\n", time
      }
    }
  }

  @Override
  void buildStarted(Gradle gradle) {}

  @Override
  void projectsEvaluated(Gradle gradle) {}

  @Override
  void projectsLoaded(Gradle gradle) {}

  @Override
  void settingsEvaluated(Settings settings) {}
}

buildscript {
  ext.kotlin_version = '1.2.21'

  repositories {
    maven {
      url "../repo/"
    }
    maven { url "https://maven.google.com" }
    jcenter()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    maven {
      url 'http://ec2-54-223-108-133.cn-north-1.compute.amazonaws.com.cn:3004/repository/maven-central/'
    }
    maven {
      url 'http://ec2-54-223-108-133.cn-north-1.compute.amazonaws.com.cn:3004/repository/google/'
    }
    google()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.2'
    //        classpath 'me.tatarka:gradle-retrolambda:3.7.0'
    //    classpath 'com.squareup.sqldelight:gradle-plugin:0.6.1'
    //    classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
    classpath 'com.sensorsdata.analytics.android:android-gradle-plugin2:1.0.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'com.github.typ0520:fastdex-gradle:0.8.8'
    classpath 'com.billy.android:autoregister:1.3.0'

    //    classpath("com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:1.1.3") {
    //      changing = true
    //    }
  }
}


allprojects {
  repositories {
    maven {
      url "../../repo/"
    }
    flatDir {
      dirs '../aars'
    }
    maven { url "https://maven.google.com" }
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    maven {
      url 'http://43.241.209.158:15004/repository/maven-releases/'
    }
    maven { url "https://jitpack.io" }

    maven {
      url 'https://dl.bintray.com/zouyuhan/maven'
    }

    maven {
      url "https://s3.amazonaws.com/repo.commonsware.com"
    }
  }
}
