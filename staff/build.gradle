apply plugin: 'com.android.application'
def libs = rootProject.ext.libraries
def config = rootProject.ext.configuration

def dependens = rootProject.ext.dependencies
def annotations = rootProject.ext.annotations

apply from: rootProject.file('qc_component.gradle')

/**
 *  打印超过50ms的任务  END*/
project.gradle.addListener(rootProject.ext.buildTimeListener)



android {

  dataBinding {
    enabled true
  }
  compileSdkVersion config.compileVersion
  buildToolsVersion config.buildToolsVersion
  defaultConfig {
    applicationId "cn.qingchengfit.staffkit"
    minSdkVersion 16
    targetSdkVersion 26
    versionCode config.version_code
    versionName "${config.version_name}"
    multiDexEnabled true
    vectorDrawables.useSupportLibrary = true
    javaCompileOptions {
      annotationProcessorOptions {
        arguments = [packageName: 'cn.qingchengfit.staff',]
      }
    }
  }

  signingConfigs {
    release {
      storeFile file("../qingcheng.keystore")
      storePassword "Qingcheng2014"
      keyAlias "Qingcheng"
      keyPassword "Qingcheng2014"
    }
    debug {
      storeFile file("../qingcheng.keystore")
      storePassword "Qingcheng2014"
      keyAlias "Qingcheng"
      keyPassword "Qingcheng2014"
    }
  }
  buildTypes {
    release {
      signingConfig signingConfigs.release
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      signingConfig signingConfigs.release
      minifyEnabled false
      shrinkResources false
      debuggable true
      debug {
        ext.enableCrashlytics = false
      }
    }
  }

  flavorDimensions "qc"
  productFlavors {
    dev {
      applicationId "cn.qingchengfit.staffkit.internaltest"
      manifestPlaceholders = [APP_NAME          : "内部测试",
                              APP_SCHAME        : "qcstaff",
                              bdpush_authorities: "cn.qingchengfit.bdpush.internaltest",
                              APP_PACKAGE       : "cn.qingchengfit.staffkit.internaltest",
                              file_provider     : "cn.qingchengfit.staffkit.internaltest.provider"]
      ndk {
        abiFilter "armeabi"
      }
      dimension "qc"
    }
    product {
      applicationId "cn.qingchengfit.staffkit"
      manifestPlaceholders = [APP_NAME          : "青橙健身管理",
                              APP_SCHAME        : "qcstaff",
                              bdpush_authorities: "cn.qingchengfit.staffkit.bdpush",
                              APP_PACKAGE       : "cn.qingchengfit.staffkit", file_provider: "cn.qingchengfit.staffkit.provider"]
      ndk {
        abiFilter "armeabi"
      }
      dimension "qc"
    }



    //动态修改配置
    applicationVariants.all { variant ->
      if (variant.buildType.name == "release") {
        println(rootProject.ext.today)
        variant.outputs.all { output ->
          output.setVersionNameOverride("1." + rootProject.ext.today)
          output.setVersionCodeOverride(rootProject.ext.today)
        }
      }
    }
  }



  lintOptions {
    abortOnError false
    disable "ResourceType"
  }

  packagingOptions {
    exclude 'META-INF/services/javax.annotation.processing.Processor'
    exclude 'com/qq/jce/wup/wup.properties'
    exclude 'assets/xgwifi.xml'
    exclude 'assets/soconfig.cfg'
    exclude 'assets/jni.ini'
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  dexOptions {
    javaMaxHeapSize "4g"
  }
  configurations.all {
    resolutionStrategy.force "com.google.code.findbugs:jsr305:3.0.1"
    resolutionStrategy.force "com.android.support:support-v4:${libs.supportVersion}"
    resolutionStrategy.force "com.android.support:support-v13:${libs.supportVersion}"
    resolutionStrategy.force "com.android.support:support-annotations:${libs.supportVersion}"
    resolutionStrategy.force "com.android.support:appcompat-v7:${libs.supportVersion}"
    resolutionStrategy.force "com.android.support:appcompat-v7:${libs.supportVersion}"
    resolutionStrategy.force "com.android.support:cardview-v7:${libs.supportVersion}"
    resolutionStrategy.force "com.android.support:design:${libs.supportVersion}"
    resolutionStrategy.force "com.android.support:percent:${libs.supportVersion}"
  }
}


//完成编译后
//afterEvaluate {
//  android.applicationVariants.all { variant ->
//    variant.assemble.doLast {
//      if (variant.buildType.name.contains('release')) {
//        variant.outputs.all { output ->
//          //加固 签名apk后输出到./output 下
//          def apkpath = output.outputFile as File
//          exec {
//            ignoreExitValue true
//            commandLine "sh", rootProject.file('reinforce.sh').absolutePath, apkpath, rootProject.file('reinforce.sh').getParentFile().absolutePath,"staff"
//          }
//        }
//      }
//    }
//  }
//}

tasks.withType(Test) {
  systemProperty "robolectric.logging", "stdout"
}
configurations.all {
  resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
}

gradle.projectsEvaluated {
  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
  }
}

ext.isTask = { name ->
  println project.gradle.startParameter.taskNames
  return project.gradle.startParameter.taskNames.contains(name)
}

task buildWithAP(dependsOn: build) {}

dependencies {
  addComponent('saasbase', false)
  addComponent('shop', false)
  addComponent('login', false)
  addComponent("checkout", false)
  addComponent("student", false)
  addComponent("card", false)
  addComponent("wxpreview", false)
  addComponent("writeoff", false)


  implementation fileTree(include: ['*.jar'], dir: 'libs')

  implementation files(dependens["pinyin"])

  implementation dependens["flycoBanner-lib"]

  implementation dependens["recyclerview-animators"]

  implementation dependens["swipemenu-recyclerview"]

  testImplementation dependens["junit"]

  androidTestImplementation(dependens["espresso-core"]) {
    exclude group: 'com.android.support', module: 'support-annotations'
  }

  annotationProcessor annotations["dagger-compiler"]
  annotationProcessor annotations["dagger-android-processor"]


  annotationProcessor annotations["flabellum-dagger2"]
  annotationProcessor annotations["flabellum-processor"]

  annotationProcessor annotations["fragmentargs"]

  annotationProcessor annotations["room"]
}

apply plugin: 'auto-register'
autoregister {
  registerInfo = [[//自动注册组件
                   'scanInterface'          : 'cn.qingchengfit.router.IComponent'
                   , 'codeInsertToClassName': 'cn.qingchengfit.router.ComponentManager'
                   , 'registerMethodName'   : 'registerComponent'
                   , 'exclude'              : [//排除的类，支持正则表达式（包分隔符需要用/表示，不能用.）
                                               'cn.qingchengfit.router.'.replaceAll("\\.",
                                                   "/") + ".*"]],
                  [//自动注册全局拦截器
                   'scanInterface'          : 'cn.qingchengfit.router.IGlobalCCInterceptor'
                   , 'codeInsertToClassName': 'cn.qingchengfit.router.GlobalCCInterceptorManager'
                   , 'registerMethodName'   : 'registerGlobalInterceptor'
                   , 'exclude'              : [//排除的类，支持正则表达式（包分隔符需要用/表示，不能用.）
                                               'cn.qingchengfit.router.'.
                                                   replaceAll("\\.",
                                                       "/") + ".*"]],
                  [//自动注册跨进程通信时自定义类型的json转换器，可以用Gson、FastJson等工具来实现
                   // 参考： demo_base/src/main/java/com.billy.cc.demo.base.GsonParamConverter
                   'scanInterface'          : 'cn.qingchengfit.router.IParamJsonConverter'
                   , 'codeInsertToClassName': 'cn.qingchengfit.router.RemoteParamUtil'
                   , 'registerMethodName'   : 'initRemoteCCParamJsonConverter'
                   , 'exclude'              : [//排除的类，支持正则表达式（包分隔符需要用/表示，不能用.）
                                               'cn.qingchengfit.router.'.
                                                   replaceAll("\\.",
                                                       "/") + ".*"]]]
}